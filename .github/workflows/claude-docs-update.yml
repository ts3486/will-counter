---
name: Claude Documentation Update

on:
  push:
    branches: [main]
    paths:
      - 'frontend/src/**'
      - 'api/src/**'
      - 'shared/**'
  workflow_dispatch:
    inputs:
      docs_type:
        description: 'Type of documentation to generate'
        required: true
        default: 'api'
        type: choice
        options:
          - api
          - frontend
          - all

jobs:
  claude-docs-update:
    name: Update Documentation with Claude
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Analyze recent changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            git diff HEAD~1..HEAD --name-only > changed_files.txt
          else
            find frontend/src api/src shared -name "*.ts" -o -name "*.tsx" -o -name "*.kt" | head -10 > changed_files.txt
          fi

      - name: Generate documentation with Claude
        id: claude-docs
        run: |
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "⚠️ ANTHROPIC_API_KEY secret not configured."
            exit 0
          fi

          # Collect source files
          find api/src -name "*.kt" -type f | head -5 | while read file; do
            echo "### $file"
            head -30 "$file"
            echo ""
          done > api_sources.txt

          find frontend/src -name "*.ts" -o -name "*.tsx" | head -5 | while read file; do
            echo "### $file"
            head -30 "$file"
            echo ""
          done > frontend_sources.txt

          cat > claude_prompt.txt << 'EOF'
          You are a technical writer generating documentation for Will Counter, 
          a React Native + Kotlin mobile app for willpower tracking.

          Tech stack:
          - Frontend: React Native + TypeScript, Redux, Auth0
          - Backend: Kotlin + Ktor
          - Database: Supabase with RLS

          Please generate comprehensive documentation including:
          1. API endpoints and usage
          2. Frontend architecture and components
          3. Authentication flow
          4. Database integration patterns
          5. Development guidelines

          API Source Files:
          $(cat api_sources.txt)

          Frontend Source Files:
          $(cat frontend_sources.txt)

          Recent Changes:
          $(cat changed_files.txt)

          Generate well-structured markdown documentation.
          EOF

          # Call Claude API
          response=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
            -H "Content-Type: application/json" \
            -H "x-api-key: ${{ secrets.ANTHROPIC_API_KEY }}" \
            -H "anthropic-version: 2023-06-01" \
            -d '{
              "model": "claude-3-sonnet-20240229",
              "max_tokens": 3000,
              "messages": [
                {
                  "role": "user",
                  "content": "'"$(cat claude_prompt.txt | sed 's/"/\\"/g' | tr '\n' ' ')"'"
                }
              ]
            }')

          # Extract and save content
          docs_content=$(echo "$response" | jq -r '.content[0].text // "Error generating documentation"')
          echo "$docs_content" > docs/claude-generated-docs.md

      - name: Create documentation PR
        if: env.ANTHROPIC_API_KEY != ''
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            try {
              execSync('git add docs/', { stdio: 'pipe' });
              const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' });

              if (gitStatus.trim() === '') {
                console.log('No documentation changes to commit');
                return;
              }

              execSync('git config user.name "claude-docs-bot"');
              execSync('git config user.email "noreply@github.com"');

              const commitMessage = 'docs: Update documentation via Claude AI';
              execSync(`git commit -m "${commitMessage}"`);

              const branchName = `claude-docs-update-${Date.now()}`;
              execSync(`git checkout -b ${branchName}`);
              execSync(`git push origin ${branchName}`);

              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📚 Claude Documentation Update',
                head: branchName,
                base: 'main',
                body: `## 📚 Automated Documentation Update

                This PR contains documentation updates generated by Claude AI.

                **Generated Documentation:**
                - \`docs/claude-generated-docs.md\` - Comprehensive project documentation

                **Please review the generated content for accuracy before merging.**

                *This PR was created automatically by the Claude documentation workflow.*`
              });

            } catch (error) {
              console.log('Error creating documentation PR:', error.message);
            }