---
name: Claude PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

jobs:
  claude-review:
    name: Claude Code Review
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        run: |
          # Get the diff for this PR
          git diff origin/${{ github.base_ref }}..HEAD > pr_diff.txt

          # Limit diff size to avoid API limits
          if [ $(wc -c < pr_diff.txt) -gt 50000 ]; then
            head -c 45000 pr_diff.txt > pr_diff_truncated.txt
            echo "... [DIFF TRUNCATED DUE TO SIZE]" >> pr_diff_truncated.txt
            mv pr_diff_truncated.txt pr_diff.txt
          fi

          # Get list of changed files
          base_ref="${{ github.base_ref }}"
          git diff --name-only origin/$base_ref..HEAD > changed_files.txt

      - name: Call Claude API
        run: |
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "‚ö†Ô∏è ANTHROPIC_API_KEY secret not configured."
            echo "review_content=**Claude API Key Missing**: Please configure ANTHROPIC_API_KEY secret." >> $GITHUB_OUTPUT
            exit 0
          fi

          # Prepare prompt
          cat > claude_prompt.txt << 'EOF'
          You are a senior software engineer reviewing code for Will Counter, 
          a React Native + Kotlin mobile app for willpower tracking.

          Tech stack:
          - Frontend: React Native + TypeScript, Redux, Auth0
          - Backend: Kotlin + Ktor
          - Database: Supabase with RLS

          Please review these changes and provide feedback on:
          1. Code quality and potential bugs
          2. Security considerations
          3. Performance implications
          4. Best practices compliance

          Changed files:
          $(cat changed_files.txt)

          Code diff:
          $(cat pr_diff.txt)

          Provide markdown-formatted review with specific suggestions.
          EOF

          # Call Claude API
          api_key="${{ secrets.ANTHROPIC_API_KEY }}"
          response=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
            -H "Content-Type: application/json" \
            -H "x-api-key: $api_key" \
            -H "anthropic-version: 2023-06-01" \
            -d '{
              "model": "claude-3-haiku-20240307",
              "max_tokens": 2000,
              "messages": [
                {
                  "role": "user",
                  "content": "'"$(cat claude_prompt.txt | sed 's/"/\\"/g' | tr '\n' ' ')"'"
                }
              ]
            }')

          # Extract content
          review_content=$(echo "$response" | \
            jq -r '.content[0].text // "Error: Could not parse Claude response"')

          # Handle API errors
          if echo "$response" | jq -e '.error' > /dev/null; then
            error_msg=$(echo "$response" | jq -r '.error.message // "Unknown API error"')
            review_content="**Claude API Error**: $error_msg"
          fi

          # Save review
          echo "$review_content" > claude_review.md

      - name: Post review comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let reviewContent;
            try {
              reviewContent = fs.readFileSync('claude_review.md', 'utf8');
            } catch (error) {
              reviewContent = "Error reading Claude review content.";
            }

            const comment = `## ü§ñ Claude Code Review

            ${reviewContent}

            ---
            *This review was generated by Claude AI. Please use your judgment.*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Security check
        run: |
          # Check for security patterns
          patterns="(password|secret|key|token)"
          if grep -iE "$patterns" pr_diff.txt > /dev/null; then
            echo "‚ö†Ô∏è Security-sensitive patterns detected"
          fi