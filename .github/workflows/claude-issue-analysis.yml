---
name: Claude Issue Analysis

on:
  issues:
    types: [opened, reopened]

jobs:
  claude-issue-analysis:
    name: Claude Issue Analysis
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze issue with Claude
        id: claude-analysis
        run: |
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "⚠️ ANTHROPIC_API_KEY secret not configured."
            exit 0
          fi

          # Prepare the prompt for Claude
          cat > claude_prompt.txt << 'EOF'
          You are analyzing a new issue for Will Counter, a React Native willpower tracking app.

          Tech stack:
          - Frontend: React Native + TypeScript, Redux, Auth0
          - Backend: Kotlin + Ktor
          - Database: Supabase with PostgreSQL and RLS

          Issue Title: ${{ github.event.issue.title }}
          
          Issue Description:
          ${{ github.event.issue.body }}
          
          Submitted by: ${{ github.event.issue.user.login }}

          Please provide:
          1. Issue Classification (Bug/Feature/Enhancement/Documentation/etc.)
          2. Priority assessment (Critical/High/Medium/Low)
          3. Affected components/modules
          4. Suggested labels
          5. Implementation approach if applicable
          6. Questions for clarification

          Format as structured markdown for easy reading.
          EOF

          # Call Claude API
          response=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
            -H "Content-Type: application/json" \
            -H "x-api-key: ${{ secrets.ANTHROPIC_API_KEY }}" \
            -H "anthropic-version: 2023-06-01" \
            -d '{
              "model": "claude-3-haiku-20240307",
              "max_tokens": 1500,
              "messages": [
                {
                  "role": "user",
                  "content": "'"$(cat claude_prompt.txt | sed 's/"/\\"/g' | tr '\n' ' ')"'"
                }
              ]
            }')

          # Extract content
          analysis_content=$(echo "$response" | jq -r '.content[0].text // "Error: Could not parse Claude response"')

          # Handle API errors
          if echo "$response" | jq -e '.error' > /dev/null; then
            error_msg=$(echo "$response" | jq -r '.error.message // "Unknown API error"')
            analysis_content="**Claude API Error**: $error_msg"
          fi

          # Save analysis
          echo "$analysis_content" > claude_analysis.md

      - name: Post analysis comment
        if: env.ANTHROPIC_API_KEY != ''
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let analysisContent;
            try {
              analysisContent = fs.readFileSync('claude_analysis.md', 'utf8');
            } catch (error) {
              analysisContent = "Error reading Claude analysis content.";
            }

            const comment = `## 🔍 Claude Issue Analysis

            ${analysisContent}

            ---
            *This analysis was generated by Claude AI. Please review and adjust as needed.*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Auto-label issues
        uses: actions/github-script@v7
        with:
          script: |
            const title = "${{ github.event.issue.title }}".toLowerCase();
            const body = "${{ github.event.issue.body }}".toLowerCase();
            const content = title + " " + body;

            const labels = [];

            if (content.includes('bug') || content.includes('error')) {
              labels.push('bug');
            }
            if (content.includes('feature') || content.includes('enhancement')) {
              labels.push('enhancement');
            }
            if (content.includes('documentation') || content.includes('docs')) {
              labels.push('documentation');
            }
            if (content.includes('auth') || content.includes('login')) {
              labels.push('auth');
            }
            if (content.includes('ui') || content.includes('interface')) {
              labels.push('ui/ux');
            }
            if (content.includes('api') || content.includes('backend')) {
              labels.push('backend');
            }
            if (content.includes('frontend') || content.includes('react native')) {
              labels.push('frontend');
            }
            if (content.includes('database') || content.includes('supabase')) {
              labels.push('database');
            }

            labels.push('triage');

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labels
              });
            }